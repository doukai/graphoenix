scalar ID
scalar Int
scalar Float
scalar String
scalar Boolean
scalar BigInteger
scalar BigDecimal
scalar Date
scalar Time
scalar DateTime
scalar Timestamp
enum Operator @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.Operator") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  EQ

  NEQ

  LK

  NLK

  GT

  NLTE

  GTE

  NLT

  LT

  NGTE

  LTE

  NGT

  NIL

  NNIL

  IN

  NIN

  BT

  NBT
}
enum Conditional @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.Conditional") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  AND

  OR
}
enum Sort @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.Sort") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  ASC

  DESC
}
enum Function @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.Function") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  COUNT

  MAX

  MIN

  SUM

  AVG
}
enum Protocol @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.Protocol") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  LOCAL

  GRPC

  HTTP

  RSOCKET
}
enum __TypeKind @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.__TypeKind") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}
enum __DirectiveLocation @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.enumType.__DirectiveLocation") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  QUERY

  MUTATION

  SUBSCRIPTION

  FIELD

  FRAGMENT_DEFINITION

  FRAGMENT_SPREAD

  INLINE_FRAGMENT

  SCHEMA

  SCALAR

  OBJECT

  FIELD_DEFINITION

  ARGUMENT_DEFINITION

  INTERFACE

  UNION

  ENUM

  ENUM_VALUE

  INPUT_OBJECT

  INPUT_FIELD_DEFINITION
}
enum Sex @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.enumType.Sex") {
  MAN

  FEMALE
}
enum RoleType @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.enumType.RoleType") {
  ADMIN

  USER

  ANONYMOUS
}
interface Meta @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  isDeprecated: Boolean

  version: Int

  realmId: String

  createUserId: String

  createTime: Timestamp

  updateUserId: String

  updateTime: Timestamp

  createGroupId: String
}
type PageInfo @containerType @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.objectType.PageInfo") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String!

  endCursor: String!
}
type __Schema @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__Schema") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  queryTypeName: String

  mutationTypeName: String

  subscriptionTypeName: String

  types: [__Type!]! @map(to: "schemaId", from: "id")

  queryType: __Type! @map(anchor: true, from: "queryTypeName", to: "name")

  mutationType: __Type @map(from: "mutationTypeName", to: "name", anchor: true)

  subscriptionType: __Type @map(from: "subscriptionTypeName", to: "name", anchor: true)

  directives: [__Directive!]! @map(from: "id", to: "schemaId")
}
type __Type @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__Type") {
  name: ID! @dataType(type: "varchar")

  schemaId: Int

  kind: __TypeKind!

  description: String

  fields: [__Field!] @map(from: "name", to: "ofTypeName")

  interfaces: [__Type!] @map(to: "name", with: {
  from: "typeName", to: "interfaceName", type: "__TypeInterfaces"
  }, from: "name")

  possibleTypes: [__Type!] @map(from: "name", with: {
  from: "typeName", to: "possibleTypeName", type: "__TypePossibleTypes"
  }, to: "name")

  enumValues: [__EnumValue!] @map(from: "name", to: "ofTypeName")

  inputFields: [__InputValue!] @map(to: "ofTypeName", from: "name")

  ofTypeName: String

  ofType: __Type @map(from: "ofTypeName", anchor: true, to: "name")
}
type __TypeInterfaces @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__TypeInterfaces") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  typeName: String!

  interfaceName: String!
}
type __TypePossibleTypes @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__TypePossibleTypes") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  typeName: String!

  possibleTypeName: String!
}
type __Field @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__Field") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  name: String

  typeName: String

  ofTypeName: String

  ofType: __Type @map(anchor: true, to: "name", from: "ofTypeName")

  description: String

  args: [__InputValue!]! @map(from: "id", to: "fieldId")

  type: __Type! @map(anchor: true, from: "typeName", to: "name")

  deprecationReason: String

  from: String

  to: String

  withType: String

  withFrom: String

  withTo: String
}
type __InputValue @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__InputValue") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  name: String

  typeName: String

  ofTypeName: String

  ofType: __Type @map(to: "name", anchor: true, from: "ofTypeName")

  fieldId: Int

  directiveName: String

  description: String

  type: __Type! @map(anchor: true, to: "name", from: "typeName")

  defaultValue: String
}
type __EnumValue @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__EnumValue") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  name: String

  ofTypeName: String

  ofType: __Type @map(from: "ofTypeName", anchor: true, to: "name")

  description: String

  deprecationReason: String
}
type __Directive @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__Directive") {
  name: ID @dataType(type: "varchar")

  schemaId: Int

  description: String

  locations: [__DirectiveLocation!]! @map(from: "name", with: {
  from: "directiveName", to: "directiveLocation", type: "__DirectiveLocations"
  })

  args: [__InputValue!]! @map(from: "name", to: "directiveName")

  onOperation: Boolean

  onFragment: Boolean

  onField: Boolean
}
type __DirectiveLocations @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.__DirectiveLocations") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  directiveName: String!

  directiveLocation: __DirectiveLocation!
}
type User @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.User") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  login: String!

  password: String!

  name: String!

  age: Int

  disable: Boolean

  sex: Sex

  userProfile: UserProfile @map(from: "id", to: "userId")

  rpcUserProfile: UserProfile @fetch(to: "userId", protocol: GRPC, from: "id")

  organizationId: Int

  rpcOrganization: Organization @fetch(from: "organizationId", protocol: GRPC, to: "id", anchor: true)

  organization: Organization @map(from: "organizationId", to: "id", anchor: true)

  roles: [Role!] @map(to: "id", with: {
  from: "userId", to: "roleId", type: "UserRole"
  }, from: "id")

  phones: [String!] @map(from: "id", with: {
  from: "userId", to: "phone", type: "UserPhones"
  })

  test1: [Int!] @map(from: "id", with: {
  from: "userId", to: "test1", type: "UserTest1"
  })

  test2: [Boolean!] @map(with: {
  from: "userId", to: "test2", type: "UserTest2"
  }, from: "id")

  userDetail2: String @invoke
}
type UserProfile @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.UserProfile") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  userId: String

  email: String

  address: String

  qq: String

  user: User @map(from: "userId", to: "id", anchor: true)

  rpcUser: User @fetch(anchor: true, from: "userId", to: "id", protocol: GRPC)
}
type UserPhones @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.UserPhones") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  userId: Int

  phone: String
}
type UserTest1 @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.UserTest1") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  userId: Int

  test1: Int
}
type UserTest2 @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.UserTest2") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  userId: Int

  test2: Boolean
}
type UserRole @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.UserRole") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  userId: Int

  roleId: Int
}
type Role @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.Role") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  name: String!

  type: [RoleType]! @map(from: "id", with: {
  from: "roleId", to: "type", type: "RoleRoleType"
  })

  users: [User!] @map(with: {
  from: "roleId", to: "userId", type: "UserRole"
  }, from: "id", to: "id")
}
type RoleRoleType @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.RoleRoleType") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  roleId: Int

  type: RoleType
}
type Organization @table(engine: "InnoDB") @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.Organization") {
  id: ID @dataType(type: "int") @column(autoIncrement: true)

  aboveId: Int

  above: Organization @map(anchor: true, from: "aboveId", to: "id")

  users: [User!] @map(to: "organizationId", from: "id")

  rpcUsers: [User] @fetch(to: "organizationId", protocol: GRPC, from: "id")

  name: String!

  orgLevel3: [Int] @invoke

  roleDisable: [Boolean] @invoke

  userByOrg: [User] @invoke

  parent: Organization @invoke

  containerType: ContainerType @invoke
}
type ContainerType @classInfo(className: "io.graphoenix.showcase.mysql.api.ContainerType") @containerType @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
}
type QueryType @packageInfo(packageName: "io.graphoenix.showcase.mysql") @classInfo(className: "io.graphoenix.showcase.mysql.dto.objectType.QueryType") {
  userDetail(user: UserInput): String @invoke

  userDetail6(user: UserInput): [String] @invoke

  orgLevel(organization: OrganizationInput): Int @invoke

  roleDisable2(organization: OrganizationInput): [Boolean] @invoke

  orgLevel5(organization: OrganizationInput): [Int] @invoke

  userByOrg2(organization: OrganizationInput): [User] @invoke

  parent2(organization: OrganizationInput): Organization @invoke

  findRole2(name: String, type: Int, disable: Boolean): [Role] @invoke

  findContainerType(name: String): ContainerType @invoke
}
input ValidationInput @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.ValidationInput") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  minLength: Int
  maxLength: Int
  pattern: String
  format: String
  contentMediaType: String
  contentEncoding: String
  minimum: Float
  exclusiveMinimum: Float
  maximum: Float
  exclusiveMaximum: Float
  multipleOf: Float
  const: String
  enum: [String]
  items: ValidationInput
  minItems: Int
  maxItems: Int
  uniqueItems: Boolean
  allOf: [ValidationInput]
  anyOf: [ValidationInput]
  oneOf: [ValidationInput]
  not: ValidationInput
  properties: [Property]
  if: ValidationInput
  then: ValidationInput
  else: ValidationInput
  dependentRequired: [Property]
}
input Property @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.Property") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  name: String!
  validation: ValidationInput
  required: [String]
}
input IDExpression @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.IDExpression") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  opr: Operator = EQ
  val: ID
  in: [ID]
  skipNull: Boolean = false
}
input StringExpression @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.StringExpression") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  opr: Operator = EQ
  val: String
  in: [String]
  skipNull: Boolean = false
}
input BooleanExpression @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.BooleanExpression") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  opr: Operator = EQ
  val: Boolean
  in: [Boolean]
  skipNull: Boolean = false
}
input IntExpression @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.IntExpression") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  opr: Operator = EQ
  val: Int
  in: [Int]
  skipNull: Boolean = false
}
input FloatExpression @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.FloatExpression") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  opr: Operator = EQ
  val: Float
  in: [Float]
  skipNull: Boolean = false
}
input MapWith @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.MapWith") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  type: String
  from: String
  to: String
}
input InvokeParameter @packageInfo(packageName: "io.graphoenix.core") @classInfo(className: "io.graphoenix.core.dto.inputObjectType.InvokeParameter") @packageInfo(packageName: "io.graphoenix.showcase.mysql") {
  name: String
  className: String
}
directive @validation(minLength: Int maxLength: Int pattern: String format: String contentMediaType: String contentEncoding: String minimum: Float exclusiveMinimum: Float maximum: Float exclusiveMaximum: Float multipleOf: Float const: String enum: [String] items: ValidationInput minItems: Int maxItems: Int uniqueItems: Boolean allOf: [ValidationInput] anyOf: [ValidationInput] oneOf: [ValidationInput] not: ValidationInput properties: [Property] if: ValidationInput then: ValidationInput else: ValidationInput dependentRequired: [Property]) on FIELD_DEFINITION
directive @dataType(type: String length: Int decimals: Int default: String) on FIELD_DEFINITION
directive @map(from: String! with: MapWith to: String anchor: Boolean) on FIELD_DEFINITION
directive @fetch(protocol: Protocol from: String! with: MapWith to: String anchor: Boolean) on FIELD_DEFINITION
directive @invoke(className: String methodName: String parameters: [InvokeParameter] returnClassName: String) on FIELD_DEFINITION
directive @skipNullArguments(if: Boolean!) on FIELD
directive @cursor on FIELD_DEFINITION
directive @func(name: Function field: String) on FIELD_DEFINITION
directive @containerType on OBJECT
directive @classInfo(className: String!) on OBJECT
directive @packageInfo(packageName: String!) on OBJECT
directive @connection(field: String agg: String) on FIELD_DEFINITION
directive @update(if: Boolean!) on FIELD
directive @delete(if: Boolean!) on FIELD
directive @mergeToList(arguments: [String]) on FIELD
directive @format(value: String locale: String) on FIELD_DEFINITION
directive @permitAll on OBJECT
directive @denyAll on OBJECT
directive @rolesAllowed(roles: [String]) on OBJECT
directive @table(engine: String = "InnoDB") on OBJECT
directive @column(default: String autoIncrement: Boolean) on FIELD_DEFINITION