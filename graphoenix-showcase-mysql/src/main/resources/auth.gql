scalar ID
scalar Int
scalar Float
scalar String
scalar Boolean

scalar Booleaninterface Meta {
version: Int
isDeprecated: Boolean
}

enum Operator {
EQ
NEQ
LK
NLK
GT
NLTE
GTE
NLT
LT
NGTE
LTE
NGT
NIL
NNIL
}

enum Conditional {
AND
OR
}

input IDExpression {
opr: Operator = EQ
val: ID
in: [ID]
}

input StringExpression {
opr: Operator = EQ
val: String
in: [String]
}

input IntExpression {
opr: Operator = EQ
val: Int
in: [Int]
}

input FloatExpression {
opr: Operator = EQ
val: Float
in: [Float]
}

input MapWith {
type: String
from: String
to: String
}

directive @dataType(
type: String
length: Int
decimals: Int
) on FIELD_DEFINITION

directive @map(
from: String
with: MapWith
to: String
) on FIELD_DEFINITION


type User @table(engine:"InnoDB"){
    id: ID @column(autoIncrement:true)
    login  : String!
    password: String!
    name: String!
    age: Int
    disable: Boolean
    sex: Sex
    organizationId: Int
    organization: Organization @map(from: "organizationId", to: "id")
    roles: [Role!] @map(from: "id", with:{type: "UserRole" from: "userId", to: "roleId"}, to: "id")
}

enum Sex {
    MAN
    FEMALE
}

type UserRole @table(engine:"InnoDB"){
    id: ID @column(autoIncrement:true)
    userId  : Int
    roleId  : Int
}

type Role @table(engine:"InnoDB") {
    id: ID @column(autoIncrement:true)
    name: String!
    users: [User!] @map(from: "id", with:{type: "UserRole", from: "roleId", to: "userId"}, to: "id")
}

type Organization @table(engine:"InnoDB") {
    id: ID @column(autoIncrement:true)
    aboveId:Int
    above: Organization @map(from: "aboveId", to: "id")
    users: [User!] @map(from: "id", to: "organizationId")
    name: String!
}
