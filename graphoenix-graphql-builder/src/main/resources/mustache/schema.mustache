schema {
    query: QueryType
    mutation: MutationType
}

type QueryType {
{{#objects}}
    {{schemaFieldName}}(id: ID!): {{name}}
    {{schemaFieldName}}List({{#fields}}{{name}}:{{typeName}}{{^isBoolean}}Expression{{/isBoolean}}{{^isLast}}, {{/isLast}}{{/fields}}): [{{name}}]
{{/objects}}
}

type MutationType {
{{#objects}}
    {{schemaFieldName}}({{#fields}}{{name}}:{{#isList}}[{{/isList}}{{typeName}}{{#isObject}}Input{{/isObject}}{{#isNonNull}}!{{/isNonNull}}{{#isList}}]{{/isList}}{{#isNonNullList}}!{{/isNonNullList}}{{^isLast}}, {{/isLast}}{{/fields}}): {{name}}
{{/objects}}
}

{{#enums}}
input {{name}}Expression {
    opr:Operator = EQ
    val:{{name}}
    in:[{{name}}]
}

{{/enums}}
{{#objects}}
input {{name}}Expression {
    cond:Conditional = AND
    exs:[{{name}}Expression]
{{#fields}}
    {{name}}:{{typeName}}{{^isBoolean}}Expression{{/isBoolean}}
{{/fields}}
}

{{/objects}}
{{#objects}}
input {{name}}Input {
{{#fields}}
    {{name}}:{{#isList}}[{{/isList}}{{typeName}}{{#isObject}}Input{{/isObject}}{{#isNonNull}}!{{/isNonNull}}{{#isList}}]{{/isList}}{{#isNonNullList}}!{{/isNonNullList}}
{{/fields}}
}

{{/objects}}
enum Operator {
    EQ
    NEQ
    LK
    NLK
    GT
    NLTE
    GTE
    NLT
    LT
    NGTE
    LTE
    NGT
    NIL
    NNIL
}

enum Conditional {
    AND
    OR
}

input IDExpression {
    opr: Operator = EQ
    val: ID
    in: [ID]
}

input StringExpression {
    opr: Operator = EQ
    val: String
    in: [String]
}

input IntExpression {
    opr: Operator = EQ
    val: Int
    in: [Int]
}

input FloatExpression {
    opr: Operator = EQ
    val: Float
    in: [Float]
}

directive @table(
    engine : String = "InnoDB"
) on OBJECT

directive @column(
    default: String
    autoIncrement: Boolean
) on FIELD_DEFINITION

directive @dataType(
    type: String
    length: Int
    decimals: Int
) on FIELD_DEFINITION

input MapWith {
    type: String
    from: String
    to: String
}

directive @map(
    from: String
    with: MapWith
    to: String
) on FIELD_DEFINITION
