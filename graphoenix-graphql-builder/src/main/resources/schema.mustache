schema {
    query: QueryType
    mutation: MutationType
}

type QueryType {
    __schema: __Schema!
    __type(name: String!): __Type
{{#objects}}
    {{schemaFieldName}}(id: ID!): {{name}}
    {{schemaFieldName}}List({{#fields}}{{name}}:{{typeName}}{{^isBoolean}}Expression{{/isBoolean}}{{^isLast}}, {{/isLast}}{{/fields}}): [{{name}}]
{{/objects}}
}

type MutationType {
{{#objects}}
    {{schemaFieldName}}({{#fields}}{{name}}:{{typeName}}{{#isObject}}Input{{/isObject}}{{^isLast}}, {{/isLast}}{{/fields}}): {{name}}
{{/objects}}
}

{{#enums}}
input {{name}}Expression {
    opr:Operator = EQ
    val:{{name}}
    in:[{{name}}]
}

{{/enums}}
{{#objects}}
input {{name}}Expression {
    cond:Conditional = AND
    exs:[{{name}}Expression]
{{#fields}}
    {{name}}:{{typeName}}{{^isBoolean}}Expression{{/isBoolean}}
{{/fields}}
}

{{/objects}}
{{#objects}}
input {{name}}Input {
{{#fields}}
    {{name}}:{{typeName}}{{#isObject}}Input{{/isObject}}
{{/fields}}
}

{{/objects}}
type __Schema {
    id:ID
    types: [__Type!]!
    queryType: __Type!
    mutationType: __Type
    subscriptionType: __Type
    directives: [__Directive!]!
}

type __Type {
    id:ID
    kind: __TypeKind!
    name: String
    description: String

    # OBJECT and INTERFACE only
    fields(includeDeprecated: Boolean = false): [__Field!]

    # OBJECT only
    interfaces: [__Type!]

    # INTERFACE and UNION only
    possibleTypes: [__Type!]

    # ENUM only
    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

    # INPUT_OBJECT only
    inputFields: [__InputValue!]

    # NON_NULL and LIST only
    ofType: __Type
}

type __Field {
    id:ID
    name: String!
    description: String
    args: [__InputValue!]!
    type: __Type!
    isDeprecated: Boolean!
    deprecationReason: String
}

type __InputValue {
    id:ID
    name: String!
    description: String
    type: __Type!
    defaultValue: String
}

type __EnumValue {
    id:ID
    name: String!
    description: String
    isDeprecated: Boolean!
    deprecationReason: String
}

enum __TypeKind {
    SCALAR
    OBJECT
    INTERFACE
    UNION
    ENUM
    INPUT_OBJECT
    LIST
    NON_NULL
}

type __Directive {
    id:ID
    name: String!
    description: String
    locations: [__DirectiveLocation!]!
    args: [__InputValue!]!
}

enum __DirectiveLocation {
    QUERY
    MUTATION
    SUBSCRIPTION
    FIELD
    FRAGMENT_DEFINITION
    FRAGMENT_SPREAD
    INLINE_FRAGMENT
    SCHEMA
    SCALAR
    OBJECT
    FIELD_DEFINITION
    ARGUMENT_DEFINITION
    INTERFACE
    UNION
    ENUM
    ENUM_VALUE
    INPUT_OBJECT
    INPUT_FIELD_DEFINITION
}

enum Operator {
    EQ
    NEQ
    LK
    NLK
    GT
    NLTE
    GTE
    NLT
    LT
    NGTE
    LTE
    NGT
    NIL
    NNIL
}

enum Conditional {
    AND
    OR
}

input IDExpression {
    opr:Operator = EQ
    val:ID
    in:[ID]
}

input StringExpression {
    opr:Operator = EQ
    val:String
    in:[String]
}

input IntExpression {
    opr:Operator = EQ
    val:Int
    in:[Int]
}

input FloatExpression {
    opr:Operator = EQ
    val:Float
    in:[Float]
}

directive @table(
    engine : String="InnoDB"
) on OBJECT

directive @column(
    default: String
    autoIncrement: Boolean
) on FIELD_DEFINITION

directive @dataType(
    type: String
    length: Int
    decimals: Int
) on FIELD_DEFINITION
