schema {
    query: QueryType
    mutation: MutationType
}

type QueryType {
    __schema: __Schema!
    __type(name: String!): __Type
    role(id: ID!): Role
    roleList(id:IDExpression, name:StringExpression): [Role]
    user(id: ID!): User
    userList(id:IDExpression, login:StringExpression, password:StringExpression, name:StringExpression, age:IntExpression, disable:Boolean, role:RoleExpression): [User]
    organization(id: ID!): Organization
    organizationList(id:IDExpression, above:OrganizationExpression, name:StringExpression): [Organization]
    resource(id: ID!): Resource
    resourceList(id:IDExpression, name:StringExpression, role:RoleExpression): [Resource]
}

type MutationType {
    __schema(types: [__TypeInput!]!, queryType: __TypeInput!, mutationType: __TypeInput, subscriptionType: __TypeInput, directives: [__DirectiveInput!]): __Schema
    role(id:ID, name:String): Role
    user(id:ID, login:String, password:String, name:String, age:Int, disable:Boolean, role:RoleInput): User
    organization(id:ID, above:OrganizationInput, name:String): Organization
    resource(id:ID, name:String, role:RoleInput): Resource
}

input RoleTypeExpression {
    opr:Operator = EQ
    val:RoleType
    in:[RoleType]
}

input RoleExpression {
    cond:Conditional = AND
    exs:[RoleExpression]
    id:IDExpression
    name:StringExpression
}

input UserExpression {
    cond:Conditional = AND
    exs:[UserExpression]
    id:IDExpression
    login:StringExpression
    password:StringExpression
    name:StringExpression
    age:IntExpression
    disable:Boolean
    role:RoleExpression
}

input OrganizationExpression {
    cond:Conditional = AND
    exs:[OrganizationExpression]
    id:IDExpression
    above:OrganizationExpression
    name:StringExpression
}

input ResourceExpression {
    cond:Conditional = AND
    exs:[ResourceExpression]
    id:IDExpression
    name:StringExpression
    role:RoleExpression
}

input RoleInput {
    id:ID
    name:String
}

input UserInput {
    id:ID
    login:String
    password:String
    name:String
    age:Int
    disable:Boolean
    role:RoleInput
}

input OrganizationInput {
    id:ID
    above:OrganizationInput
    name:String
}

input ResourceInput {
    id:ID
    name:String
    role:RoleInput
}

enum Operator {
    EQ
    NEQ
    LK
    NLK
    GT
    NLTE
    GTE
    NLT
    LT
    NGTE
    LTE
    NGT
    NIL
    NNIL
}

enum Conditional {
    AND
    OR
}

input IDExpression {
    opr: Operator = EQ
    val: ID
    in: [ID]
}

input StringExpression {
    opr: Operator = EQ
    val: String
    in: [String]
}

input IntExpression {
    opr: Operator = EQ
    val: Int
    in: [Int]
}

input FloatExpression {
    opr: Operator = EQ
    val: Float
    in: [Float]
}

type __Schema {
    id: ID
    types: [__Type!]!
    queryType: __Type!
    mutationType: __Type
    subscriptionType: __Type
    directives: [__Directive!]
}

type __Type {
    id: ID
    schema: __Schema
    kind: __TypeKind!
    name: String!
    description: String

    # OBJECT and INTERFACE only
    fields(includeDeprecated: Boolean = false): [__Field!]

    # OBJECT only
    interfaces: [__Type!]

    # INTERFACE and UNION only
    possibleTypes: [__Type!]

    # ENUM only
    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

    # INPUT_OBJECT only
    inputFields: [__InputValue!]

    # NON_NULL and LIST only
    ofType: __Type
}

type __Field {
    id: ID
    type: __Type!
    name: String!
    description: String
    args: [__FieldInputValue!]
    isDeprecated: Boolean
    deprecationReason: String
}

type __FieldInputValue {
    id: ID!
    field: __Field!
    inputValue: __InputValue!
}

type __InputValue {
    id: ID
    type: __Type
    name: String!
    description: String
    defaultValue: String
}

type __EnumValue {
    id: ID
    type: __Type
    name: String!
    description: String
    isDeprecated: Boolean
    deprecationReason: String
}

enum __TypeKind {
    SCALAR
    OBJECT
    INTERFACE
    UNION
    ENUM
    INPUT_OBJECT
    LIST
    NON_NULL
}

type __Directive {
    id: ID
    schema: __Schema
    name: String!
    description: String
    locations: [__DirectiveLocation!]!
    args: [__DirectiveInputValue!]
}

type __DirectiveInputValue {
    id: ID!
    directive: __Directive!
    inputValue: __InputValue!
}

enum __DirectiveLocation {
    QUERY
    MUTATION
    SUBSCRIPTION
    FIELD
    FRAGMENT_DEFINITION
    FRAGMENT_SPREAD
    INLINE_FRAGMENT
    SCHEMA
    SCALAR
    OBJECT
    FIELD_DEFINITION
    ARGUMENT_DEFINITION
    INTERFACE
    UNION
    ENUM
    ENUM_VALUE
    INPUT_OBJECT
    INPUT_FIELD_DEFINITION
}

input __SchemaInput {
    id: ID
    types: [__TypeInput!]!
    queryType: __TypeInput!
    mutationType: __TypeInput
    subscriptionType: __TypeInput
    directives: [__DirectiveInput!]
}

input __TypeInput {
    id: ID
    schema: __SchemaInput
    kind: __TypeKind!
    name: String!
    description: String

    # OBJECT and INTERFACE only
    fields: [__FieldInput!]

    # OBJECT only
    interfaces: [__TypeInput!]

    # INTERFACE and UNION only
    possibleTypes: [__TypeInput!]

    # ENUM only
    enumValues: [__EnumValueInput!]

    # INPUT_OBJECT only
    inputFields: [__InputValueInput!]

    # NON_NULL and LIST only
    ofType: __TypeInput
}

input __FieldInput {
    id: ID
    type: __TypeInput!
    name: String!
    description: String
    args: [__FieldInputValueInput!]
    isDeprecated: Boolean
    deprecationReason: String
}

input __FieldInputValueInput {
    id: ID!
    field: __FieldInput!
    inputValue: __InputValueInput!
}

input __InputValueInput {
    id: ID
    type: __TypeInput
    name: String!
    description: String
    defaultValue: String
}

input __EnumValueInput {
    id: ID
    type: __TypeInput
    name: String!
    description: String
    isDeprecated: Boolean
    deprecationReason: String
}

input __DirectiveInput {
    id: ID
    schema: __SchemaInput
    name: String!
    description: String
    locations: [__DirectiveLocation!]!
    args: [__DirectiveInputValueInput!]
}

input __DirectiveInputValueInput {
    id: ID!
    directive: __DirectiveInput!
    inputValue: __InputValueInput!
}

directive @table(
    engine : String="InnoDB"
) on OBJECT

directive @column(
    default: String
    autoIncrement: Boolean
) on FIELD_DEFINITION

directive @dataType(
    type: String
    length: Int
    decimals: Int
) on FIELD_DEFINITION
