scalar ID
scalar Int
scalar Float
scalar String
scalar Boolean
scalar BigInteger
scalar BigDecimal
scalar Date
scalar Time
scalar DateTime
scalar Timestamp

enum Operator {
    EQ
    NEQ
    LK
    NLK
    GT
    NLTE
    GTE
    NLT
    LT
    NGTE
    LTE
    NGT
    NIL
    NNIL
    IN
    NIN
    BT
    NBT
}

enum Conditional {
    AND
    OR
}

enum Sort {
    ASC
    DESC
}

enum Function {
    COUNT
    MAX
    MIN
    SUM
    AVG
}

enum Protocol {
    LOCAL
    GRPC
    HTTP
    RSOCKET
}

enum __TypeKind {
    SCALAR
    OBJECT
    INTERFACE
    UNION
    ENUM
    INPUT_OBJECT
    LIST
    NON_NULL
}

enum __DirectiveLocation {
    QUERY
    MUTATION
    SUBSCRIPTION
    FIELD
    FRAGMENT_DEFINITION
    FRAGMENT_SPREAD
    INLINE_FRAGMENT
    SCHEMA
    SCALAR
    OBJECT
    FIELD_DEFINITION
    ARGUMENT_DEFINITION
    INTERFACE
    UNION
    ENUM
    ENUM_VALUE
    INPUT_OBJECT
    INPUT_FIELD_DEFINITION
}

interface Meta {
    isDeprecated: Boolean
    version: Int
    realmId: Int
    createUserId: String
    createTime: Timestamp
    updateUserId: String
    updateTime: Timestamp
    createGroupId: String
}

input MetaInput @inputInterface {
    version: Int
    realmId: Int
    createUserId: String
    createTime: Timestamp
    updateUserId: String
    updateTime: Timestamp
    createGroupId: String
}

input MetaArguments @inputInterface {
    where: MetaExpression
}

input MetaExpression @inputInterface {
    realmId: IntExpression
    createUserId: StringExpression
    createTime: StringExpression
    updateUserId: StringExpression
    updateTime: StringExpression
    createGroupId: StringExpression
}

type PageInfo @containerType {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}

input IDExpression {
    opr: Operator = EQ
    val: ID
    in: [ID]
    skipNull: Boolean = false
}

input StringExpression {
    opr: Operator = EQ
    val: String
    in: [String]
    skipNull: Boolean = false
}

input BooleanExpression {
    opr: Operator = EQ
    val: Boolean
    in: [Boolean]
    skipNull: Boolean = false
}

input IntExpression {
    opr: Operator = EQ
    val: Int
    in: [Int]
    skipNull: Boolean = false
}

input FloatExpression {
    opr: Operator = EQ
    val: Float
    in: [Float]
    skipNull: Boolean = false
}

input MapWith {
    type: String
    from: String
    to: String
}

input Invoke {
    className: String
    methodName: String
    parameters: [InvokeParameter]
    returnClassName: String
}

input InvokeParameter {
    className: String
    methodName: String
    parameters: [InvokeParameter]
    returnClassName: String
}

directive @dataType(
    type: String
    default: String
    length: Int
    decimals: Int
    autoIncrement: Boolean
) on FIELD_DEFINITION

directive @map(
    from: String!
    with: MapWith
    to: String
    anchor: Boolean
) on FIELD_DEFINITION

directive @fetch(
    protocol: Protocol
    from: String!
    with: MapWith
    to: String
    anchor: Boolean
) on FIELD_DEFINITION

directive @invoke(
    className: String
    methodName: String
    parameters: [InvokeParameter]
    returnClassName: String
) on FIELD_DEFINITION | INPUT_OBJECT | QUERY | MUTATION | SUBSCRIPTION

directive @invokes(
    list: [Invoke]
) on FIELD_DEFINITION | INPUT_OBJECT | QUERY | MUTATION | SUBSCRIPTION

directive @cursor on FIELD_DEFINITION

directive @func(name: Function field: String) on FIELD_DEFINITION

directive @containerType on OBJECT

directive @classInfo(className: String! exists: Boolean annotationName: String grpcClassName: String) on OBJECT

directive @packageInfo(packageName: String! grpcPackageName: String) on OBJECT | FIELD_DEFINITION | QUERY | MUTATION | SUBSCRIPTION

directive @connection(field: String agg: String) on FIELD_DEFINITION

directive @update(if: Boolean = false) on FIELD

directive @delete(if: Boolean = false) on FIELD

directive @mergeToList(arguments: [String]) on FIELD

directive @format(value: String locale: String) on FIELD | FIELD_DEFINITION

directive @permitAll on FIELD | OBJECT

directive @denyAll on FIELD | OBJECT

directive @rolesAllowed(roles: [String]) on FIELD | OBJECT

directive @implementInputs(inputs: [String!]) on INPUT_OBJECT

directive @inputInterface on INPUT_OBJECT